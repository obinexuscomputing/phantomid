# Linux compiler and tools
CC := gcc
AR := ar
RM := rm -f
MKDIR := mkdir -p

# Project directories
ROOT_DIR := .
SRC_DIR := $(ROOT_DIR)/src
BIN_DIR := $(ROOT_DIR)/bin
OBJ_DIR := $(ROOT_DIR)/build/obj
LIB_DIR := $(ROOT_DIR)/build/lib
DOC_DIR := $(ROOT_DIR)/docs
TEST_DIR := $(ROOT_DIR)/tests

# Source directories
INTERFACE_DIR := $(SRC_DIR)/interface
RUNTIME_DIR := $(SRC_DIR)/runtime
PROGRAM_DIR := $(SRC_DIR)/programs

# OpenSSL configuration
OPENSSL_INCLUDE := -I/usr/include/openssl
OPENSSL_LIBS := -lssl -lcrypto

# Compiler flags
CFLAGS := -Wall -Wextra -O2 -g -pthread
CFLAGS += -D_GNU_SOURCE -D_POSIX_C_SOURCE=200809L
CFLAGS += $(OPENSSL_INCLUDE)
CFLAGS += -I$(SRC_DIR)

# Linker flags
LDFLAGS := -pthread
LIBS := $(OPENSSL_LIBS)

# Source files by component
INTERFACE_SRCS := $(wildcard $(INTERFACE_DIR)/*.c)
RUNTIME_SRCS := $(wildcard $(RUNTIME_DIR)/*/*.c)
PROGRAM_SRCS := $(wildcard $(PROGRAM_DIR)/*.c)

# Object files
INTERFACE_OBJS := $(INTERFACE_SRCS:$(SRC_DIR)/%.c=$(OBJ_DIR)/%.o)
RUNTIME_OBJS := $(RUNTIME_SRCS:$(SRC_DIR)/%.c=$(OBJ_DIR)/%.o)
PROGRAM_OBJS := $(PROGRAM_SRCS:$(SRC_DIR)/%.c=$(OBJ_DIR)/%.o)

# All object files
OBJS := $(INTERFACE_OBJS) $(RUNTIME_OBJS) $(PROGRAM_OBJS)

# Main target
TARGET := $(BIN_DIR)/phantomid

# Test files
TEST_SRCS := $(wildcard $(TEST_DIR)/unit/*.c) $(wildcard $(TEST_DIR)/integration/*.c)
TEST_OBJS := $(TEST_SRCS:%.c=$(OBJ_DIR)/%.o)
TEST_BINS := $(TEST_SRCS:%.c=$(BIN_DIR)/%)

# Create directories
$(shell mkdir -p $(BIN_DIR) $(OBJ_DIR)/interface $(OBJ_DIR)/runtime/cli \
	$(OBJ_DIR)/runtime/network $(OBJ_DIR)/runtime/state $(OBJ_DIR)/runtime/tree \
	$(OBJ_DIR)/programs $(OBJ_DIR)/tests/unit $(OBJ_DIR)/tests/integration)

# Default target
.PHONY: all
all: $(TARGET)

# Build main program
$(TARGET): $(OBJS)
	@echo "Linking $@..."
	@$(CC) $(OBJS) -o $@ $(LDFLAGS) $(LIBS)
	@echo "Build complete."

# Compile interface sources
$(OBJ_DIR)/interface/%.o: $(INTERFACE_DIR)/%.c
	@echo "Compiling $<..."
	@$(CC) $(CFLAGS) -c $< -o $@

# Compile runtime sources
$(OBJ_DIR)/runtime/%.o: $(RUNTIME_DIR)/%.c
	@echo "Compiling $<..."
	@$(CC) $(CFLAGS) -c $< -o $@

# Compile program sources
$(OBJ_DIR)/programs/%.o: $(PROGRAM_DIR)/%.c
	@echo "Compiling $<..."
	@$(CC) $(CFLAGS) -c $< -o $@

# Build tests
.PHONY: tests
tests: $(TEST_BINS)

$(BIN_DIR)/%: $(OBJ_DIR)/%.o $(OBJS)
	@echo "Building test $@..."
	@$(CC) $< $(OBJS) -o $@ $(LDFLAGS) $(LIBS)

$(OBJ_DIR)/tests/%.o: $(TEST_DIR)/%.c
	@echo "Compiling test $<..."
	@$(CC) $(CFLAGS) -I$(TEST_DIR) -c $< -o $@

# Run tests
.PHONY: check
check: tests
	@echo "Running tests..."
	@for test in $(TEST_BINS); do \
		echo "Running $$test..."; \
		$$test || exit 1; \
	done

# Clean build files
.PHONY: clean
clean:
	@echo "Cleaning build files..."
	@$(RM) -r $(OBJ_DIR)/* $(BIN_DIR)/*
	@echo "Clean complete."

# Build documentation
.PHONY: docs
docs:
	@echo "Generating documentation..."
	@doxygen Doxyfile 2>/dev/null || echo "Doxygen not installed"

# Install targets
.PHONY: install
install: $(TARGET)
	@echo "Installing PhantomID..."
	@install -d $(DESTDIR)/usr/local/bin
	@install -m 755 $(TARGET) $(DESTDIR)/usr/local/bin

# Uninstall targets
.PHONY: uninstall
uninstall:
	@echo "Uninstalling PhantomID..."
	@$(RM) $(DESTDIR)/usr/local/bin/phantomid

# Debug build
.PHONY: debug
debug: CFLAGS += -DDEBUG -g3 -O0
debug: all

# Release build
.PHONY: release
release: CFLAGS += -DNDEBUG -O3
release: all

# Print help
.PHONY: help
help:
	@echo "PhantomID Build System for Linux"
	@echo "-------------------------------"
	@echo "Available targets:"
	@echo "  all        - Build the project (default)"
	@echo "  clean      - Remove build files"
	@echo "  tests      - Build test programs"
	@echo "  check      - Build and run tests"
	@echo "  docs       - Generate documentation"
	@echo "  debug      - Build with debug symbols"
	@echo "  release    - Build optimized release"
	@echo "  install    - Install program"
	@echo "  uninstall  - Uninstall program"
	@echo "  help       - Show this help message"